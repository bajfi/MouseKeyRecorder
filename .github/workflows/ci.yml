name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CMAKE_BUILD_TYPE: Release
  QT_QPA_PLATFORM: offscreen
  DISPLAY: :99

jobs:
  # Linux builds
  linux-build:
    name: Build on ${{ matrix.os }} with Qt ${{ matrix.qt-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu builds with different Qt versions and C++23 support
          - os: ubuntu-22.04
            qt-version: "5.15.3"
            docker: ubuntu:22.04
            deps: |
              export DEBIAN_FRONTEND=noninteractive && \
              export TZ=Etc/UTC && \
              ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
              apt-get update && apt-get install -y \
                software-properties-common wget && \
              wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
              apt-add-repository 'deb https://apt.kitware.com/ubuntu/ jammy main' && \
              add-apt-repository ppa:ubuntu-toolchain-r/test && \
              apt-get update && apt-get install -y \
                gcc-13 g++-13 cmake git \
                qtbase5-dev qttools5-dev \
                libx11-dev libxtst-dev libxi-dev \
                libspdlog-dev nlohmann-json3-dev libpugixml-dev \
                libgtest-dev pkg-config xvfb && \
              update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13

          - os: ubuntu-24.04
            qt-version: "5.15.3"
            docker: ubuntu:24.04
            deps: |
              export DEBIAN_FRONTEND=noninteractive && \
              export TZ=Etc/UTC && \
              ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
              apt-get update && apt-get install -y \
                build-essential cmake git \
                qtbase5-dev qttools5-dev \
                libx11-dev libxtst-dev libxi-dev \
                libspdlog-dev nlohmann-json3-dev libpugixml-dev \
                libgtest-dev pkg-config xvfb

          # Fedora build
          - os: fedora-39
            qt-version: "5.15.x"
            docker: fedora:39
            deps: |
              dnf update -y && dnf install -y \
                gcc-c++ cmake git \
                qt5-qtbase-devel qt5-qttools-devel \
                libX11-devel libXtst-devel libXi-devel \
                spdlog-devel json-devel pugixml-devel \
                gtest-devel pkgconfig xorg-x11-server-Xvfb

          # Arch Linux build
          - os: arch-linux
            qt-version: "5.15.x"
            docker: archlinux:latest
            deps: |
              pacman -Syu --noconfirm && pacman -S --noconfirm \
                base-devel cmake git \
                qt5-base qt5-tools \
                libx11 libxtst libxi \
                spdlog nlohmann-json pugixml \
                gtest pkgconf xorg-server-xvfb

    container:
      image: ${{ matrix.docker }}
      env:
        DEBIAN_FRONTEND: noninteractive
        TZ: Etc/UTC

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install dependencies
      run: ${{ matrix.deps }}

    - name: Configure CMake
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} \
          -DBUILD_TESTS=ON \
          -DUSE_SYSTEM_DEPS=ON

    - name: Build
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
      run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} -j$(nproc)

    - name: Run tests
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: :99
        DEBIAN_FRONTEND: noninteractive
      run: |
        cd build
        xvfb-run -a ctest --output-on-failure --timeout 60 -C ${{ env.CMAKE_BUILD_TYPE }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-24.04'
      with:
        name: mouserecorder-linux-${{ github.sha }}
        path: |
          build/src/MouseRecorder
          mouserecorder.desktop
        retention-days: 30

  # Windows builds
  windows-build:
    name: Build on Windows with Qt ${{ matrix.qt-version }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - qt-version: "5.15.2"
            arch: win64_msvc2019_64
            compiler: msvc2019

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: windows
        target: desktop
        arch: ${{ matrix.arch }}
        dir: ${{ runner.temp }}/qt
        modules: 'qtbase qttools'
        cache: true

    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Configure CMake
      run: |
        cmake -B build -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} `
          -DBUILD_TESTS=ON `
          -DUSE_SYSTEM_DEPS=OFF

    - name: Build
      run: cmake --build build --config ${{ env.CMAKE_BUILD_TYPE }} --parallel

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --timeout 60 -C ${{ env.CMAKE_BUILD_TYPE }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mouserecorder-windows-${{ github.sha }}
        path: |
          build/src/${{ env.CMAKE_BUILD_TYPE }}/MouseRecorder.exe
        retention-days: 30

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [linux-build, windows-build]
    if: always()
    steps:
    - name: Check build results
      run: |
        if [ "${{ needs.linux-build.result }}" == "success" ] && [ "${{ needs.windows-build.result }}" == "success" ]; then
          echo "✅ All builds passed"
          exit 0
        else
          echo "❌ Some builds failed"
          echo "Linux build: ${{ needs.linux-build.result }}"
          echo "Windows build: ${{ needs.windows-build.result }}"
          exit 1
        fi

  fuzzing:
    name: OSS-Fuzz Integration
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Build fuzzers
      run: |
        # Placeholder for OSS-Fuzz integration
        echo "Fuzzing integration placeholder"
        # This would typically build fuzz targets for continuous fuzzing
